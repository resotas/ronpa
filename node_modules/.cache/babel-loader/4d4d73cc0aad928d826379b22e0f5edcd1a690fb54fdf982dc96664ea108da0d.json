{"ast":null,"code":"var _jsxFileName = \"/Users/shimizu/site/ronpa/src/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]); // チャットのメッセージ履歴を管理\n  const [input, setInput] = useState(\"\"); // 入力内容を管理\n\n  const sendMessage = async () => {\n    if (!input) return; // 入力が空の場合は何もしない\n\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage]); // ユーザーのメッセージを追加\n\n    try {\n      const response = await fetch(\"/api/generate-response\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`APIリクエストエラー: ${response.status}`);\n      }\n      const {\n        text\n      } = await response.json(); // サーバーからのレスポンス\n      const botMessage = {\n        sender: \"bot\",\n        text\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"APIリクエストエラー:\", error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"サーバーエラーが発生しました。\"\n      }]);\n    }\n    setInput(\"\"); // 入力フィールドをクリア\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.sender,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 4\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\u9001\\u4FE1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 2\n  }, this);\n}\n_s(Chat, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","sendMessage","userMessage","sender","text","prev","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","status","json","botMessage","error","console","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/shimizu/site/ronpa/src/Chat.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]); // チャットのメッセージ履歴を管理\n  const [input, setInput] = useState(\"\"); // 入力内容を管理\n\n  const sendMessage = async () => {\n\tif (!input) return; // 入力が空の場合は何もしない\n\n\tconst userMessage = { sender: \"user\", text: input };\n\tsetMessages((prev) => [...prev, userMessage]); // ユーザーのメッセージを追加\n\n\ttry {\nconst response = await fetch(\"/api/generate-response\", {\n\t  method: \"POST\",\n\t  headers: { \"Content-Type\": \"application/json\" },\n\t  body: JSON.stringify({ message: input }),\n\t});\n\t\t\n\t  if (!response.ok) {\n\t\tthrow new Error(`APIリクエストエラー: ${response.status}`);\n\t  }\n\n\t  const { text } = await response.json(); // サーバーからのレスポンス\n\t  const botMessage = { sender: \"bot\", text };\n\t  setMessages((prev) => [...prev, botMessage]);\n\t} catch (error) {\n\t  console.error(\"APIリクエストエラー:\", error);\n\t  setMessages((prev) => [\n\t\t...prev,\n\t\t{ sender: \"bot\", text: \"サーバーエラーが発生しました。\" },\n\t  ]);\n\t}\n\n\tsetInput(\"\"); // 入力フィールドをクリア\n  };\n\n  return (\n\t<div className=\"chat-container\">\n\t  <div className=\"chat-window\">\n\t\t{messages.map((msg, index) => (\n\t\t  <div key={index} className={msg.sender}>\n\t\t\t<div className=\"message\">{msg.text}</div>\n\t\t  </div>\n\t\t))}\n\t  </div>\n\t  <div className=\"chat-input\">\n\t\t<input\n\t\t  type=\"text\"\n\t\t  value={input}\n\t\t  onChange={(e) => setInput(e.target.value)}\n\t\t  placeholder=\"メッセージを入力してください...\"\n\t\t/>\n\t\t<button onClick={sendMessage}>送信</button>\n\t  </div>\n\t</div>\n  );\n}\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}